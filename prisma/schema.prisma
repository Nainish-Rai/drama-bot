// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  relationshipName String?
  createdAt        DateTime  @default(now())

  // Relations
  sessionsAsUserA  Session[] @relation("UserARelation")
  sessionsAsUserB  Session[] @relation("UserBRelation")

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userAId   String?  // Made optional for anonymous sessions
  userBId   String?  // Made optional for anonymous sessions
  createdAt DateTime @default(now())

  // Anonymous session fields
  isAnonymous    Boolean @default(false)
  inviteToken    String? @unique // UUID for sharing session
  userAName      String? // Anonymous user A name
  userBName      String? // Anonymous user B name
  userAJoined    Boolean @default(false)
  userBJoined    Boolean @default(false)
  expiresAt      DateTime? // Optional expiration for anonymous sessions

  // Relations - made optional for anonymous sessions
  userA       User?        @relation("UserARelation", fields: [userAId], references: [id], onDelete: Cascade)
  userB       User?        @relation("UserBRelation", fields: [userBId], references: [id], onDelete: Cascade)
  messages    Message[]
  resolutions Resolution[]

  @@map("sessions")
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  sender    String   // "A" or "B"
  content   String
  createdAt DateTime @default(now())

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Resolution {
  id         String   @id @default(cuid())
  sessionId  String
  verdict    String
  compromise String
  createdAt  DateTime @default(now())

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("resolutions")
}
